#!/usr/bin/python
# re-write blah logs with hostname included with job id
# convert condor history file to PBS style accounting log file for consumption by APEL parser
#
# Author: sartiran@llr.in2p3.fr 
#
# Minimal modification of an original script by Andrew Lahiff
#
# https://github.com/alahiff/cream-for-htcondor
#

from xml.etree import ElementTree
import sys
import subprocess
import glob
import grp, pwd
from datetime import datetime, timedelta
import socket
import time
import re



#for file in files:

#This adds the hostname to the job ids in the blah file
def fixBlahFile(file,outFile):
   print "opening ",file," for reading"

   fi = open(file, 'r')
   lines = fi.readlines()

   #outFile = '/var/apel/accounting/'+((file.split('/'))[len(file.split('/'))-1])
   f = open(outFile,'w')
   print 'writing to ',outFile

   LINE_EXPR = re.compile(r'\"|\"_\"')

   for line in lines:
      parts = [x.split('=',1) for x in [y for y in LINE_EXPR.split(line) if len(y) > 1]]
      record = ''
      for part in parts:
         if part[0] == 'lrmsID':
            part[1] = "%s.%s" % (part[1], socket.gethostname())
         if len(record) > 2:
            record = record + ' '
         record = record + '"' + part[0] + '=' + part[1] + '"'
      record = record + "\n"
      f.write(record)

   f.close()
   fi.close()

# Useful function
def getValue(node):
   for bit in node.getchildren():
      text = bit.text
   return text

# Convert time in seconds to HH:MM:SS such that HH can be > 24 if necessary
def tisToString(tis):
   (days, rem1) = divmod(tis, 86400)
   (hours, rem2) = divmod(rem1, 3600)
   (mins, rem3) = divmod(rem2, 60)
   hours = hours + days*24
   return '%02d:%02d:%02d' % (hours, mins, rem3)


def condorToPBS(file,outFile):
   print "opening ",file," for reading"

   # Read in XML output from condor_history
   p = subprocess.Popen(["condor_history", "-xml", "-f", file], stdout=subprocess.PIPE)
   output, err = p.communicate()
   document = ElementTree.fromstring(output)

   #outFile = '/var/apel/accounting/'+((file.split('/'))[len(file.split('/'))-1].replace('history.','condor-'))
   f = open(outFile,'w')
   print 'writing to ',outFile

   data = {}
   count = 0
   ecount = 0

   # List of required attributes
   req = ['ClusterId', 'ProcId', 'GlobalJobId', 'Owner', 'AcctGroup', 'ExitStatus', 'LastRemoteHost', 'RequestCpus', 'RequestMemory', 'QDate', 'JobStartDate', 'CompletionDate', 'RemoteUserCpu', 'RemoteSysCpu', 'RemoteWallClockTime' ,'ResidentSetSize_RAW', 'ImageSize_RAW', 'DiskUsage_RAW', 'NumJobStarts', 'NumShadowStarts' ]

   for job in document.findall( 'c' ):
      for bit in job.findall( 'a' ):
         attr = bit.attrib[ 'n' ]
         for item in req:
            if attr == item:
               data[item] = getValue(bit)

      if len(data) == 20:
         count = count + 1

         groups = [g.gr_name for g in grp.getgrall() if data['Owner'] in g.gr_mem]
         gid = pwd.getpwnam(data['Owner']).pw_gid
         group = grp.getgrgid(gid).gr_name

         #scaling = float(data['MATCH_EXP_MachineRalScaling'])
         scaling = 1
         cputime_raw = float(data['RemoteUserCpu']) + float(data['RemoteSysCpu'])
         walltime_raw = float(data['RemoteWallClockTime'])

         cputime = tisToString(int(scaling * cputime_raw))
         walltime = tisToString(int(scaling * walltime_raw))

         mem = "%skb" % data['ResidentSetSize_RAW']
         vmem = "%skb" % data['ImageSize_RAW']

         host = (data['LastRemoteHost'].split('@'))[1]

         exec_host = ""
         for i in range(int(data['RequestCpus'])):
            if i > 0:
               exec_host = exec_host + "+"
            exec_host = exec_host + "%s/%d" % (host, i)

         unused_date = time.strftime('%m-%d-%Y %H:%M:%S', time.localtime(int(data['CompletionDate'])))

         record = "%s;E;%s.%s;user=%s group=%s start=%s end=%s resources_used.cput=%s resources_used.walltime=%s resources_used.mem=%s resources_used.vmem=%s exec_host=%s\n" % (unused_date, data['ClusterId'], socket.getfqdn(), data['Owner'], group, data['JobStartDate'], data['CompletionDate'], cputime, walltime, mem, vmem, exec_host)

         f.write(record)

      else:
         ecount = ecount + 1

   print 'Read',count,'records from file ',file,' with ',ecount,' errors'

   f.close()




usedate = datetime.now() - timedelta(days=1)
yesterday = '%d%02d%02d' % (usedate.year, usedate.month, usedate.day)
usedate = datetime.now()
today = '%d%02d%02d' % (usedate.year, usedate.month, usedate.day)

fixBlahFile('/var/log/accounting/blahp.log-'+yesterday,'/var/apel/accounting/blahp.log-'+yesterday);

files = glob.glob('/var/lib/condor/spool/history.'+today+'*')
condorToPBS(files[0], '/var/lib/condor/server_priv/accounting/'+yesterday)



